# Auth Service Configuration
spring:
  application:
    name: auth-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}
  
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/honda_ego}
    username: ${SPRING_DATASOURCE_USERNAME:honda_admin}
    password: ${SPRING_DATASOURCE_PASSWORD:honda_secure_2025}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /api/auth

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:localhost}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:honda_ego_super_secret_key_2025_very_long_and_secure}
  expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds

# Application Configuration
app:
  auth:
    token-secret: ${JWT_SECRET:honda_ego_super_secret_key_2025_very_long_and_secure}
    token-expiration-msec: ${JWT_EXPIRATION:86400000}
    refresh-token-expiration-msec: ${JWT_REFRESH_EXPIRATION:604800000}
  
  oauth2:
    authorized-redirect-uris:
      - http://localhost:3000/oauth2/redirect
      - http://localhost:8080/oauth2/redirect
  
  cors:
    allowed-origins:
      - http://localhost:3000
      - http://localhost:8080
      - http://localhost:19006
    allowed-methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowed-headers:
      - "*"
    allow-credentials: true

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Logging Configuration
logging:
  level:
    com.honda.ego.auth: ${LOG_LEVEL:INFO}
    org.springframework.security: ${LOG_LEVEL:INFO}
    org.springframework.data.redis: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Rate Limiting
rate-limit:
  enabled: ${RATE_LIMIT_ENABLED:true}
  requests-per-minute: ${RATE_LIMIT_REQUESTS_PER_MINUTE:100}

# Security Configuration
security:
  require-ssl: false
  
# Email Templates
email:
  verification:
    subject: "Honda eGo - Verify Your Email"
    template: "email-verification"
  password-reset:
    subject: "Honda eGo - Password Reset"
    template: "password-reset"
  welcome:
    subject: "Welcome to Honda eGo!"
    template: "welcome"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

logging:
  level:
    com.honda.ego.auth: DEBUG
    org.springframework.security: DEBUG

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka
  instance:
    prefer-ip-address: true
    ip-address: ${HOSTNAME:auth-service}

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  
  jpa:
    show-sql: false

logging:
  level:
    com.honda.ego.auth: WARN
    org.springframework.security: WARN
    
security:
  require-ssl: true
